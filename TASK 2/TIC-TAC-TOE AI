board = [' '] * 9
X = 'X'
O = 'O'

def print_board(board):
    for i in range(3):
        print('|' + '|'.join(board[i*3:(i*3)+3]) + '|')
    print("-----")

def is_winner(board, player):
   
    for i in range(3):
        if board[i*3] == player and board[i*3+1] == player and board[i*3+2] == player:
            return True

    for i in range(3):
        if board[i] == player and board[i+3] == player and board[i+6] == player:
            return True
  
    if board[0] == player and board[4] == player and board[8] == player:
        return True
    if board[2] == player and board[4] == player and board[6] == player:
        return True
    return False

def is_board_full(board):
    return ' ' not in board

def evaluate(board):
    
    if is_winner(board, X):
        return 10
    elif is_winner(board, O):
        return -10
    else:
        return 0

def minimax(board, depth, is_maximizing):
    score = evaluate(board)
    if score != 0 or is_board_full(board):
        return score

    if is_maximizing:
        best_score = -float('inf')
        for i in range(len(board)):
            if board[i] == ' ':
                board[i] = X
                score = minimax(board, depth - 1, False)
                board[i] = ' '
                best_score = max(best_score, score)
        return best_score
    else:
        best_score = float('inf')
        for i in range(len(board)):
            if board[i] == ' ':
                board[i] = O
                score = minimax(board, depth - 1, True)
                board[i] = ' '
                best_score = min(best_score, score)
        return best_score

def make_move(board, player, pos):
    if board[pos] == ' ':
        board[pos] = player
        return True
    return False

def get_player_move(board):
    while True:
        try:
            move = int(input("Enter your move (1-9): ")) - 1
            if 0 <= move <= 8 and board[move] == ' ':
                return move
            else:
                print("Invalid move. Try again.")
        except ValueError:
            print("Invalid input. Please enter a number between 1 and 9.")

def get_best_move(board, depth):
    best_move = None
    best_score = -float('inf')
    for i in range(len(board)):
        if board[i] == ' ':
            board[i] = O
            score = minimax(board, depth - 1, False)
            board[i] = ' '
            if score > best_score:
                best_score = score
                best_move = i
    return best_move

def main():
    current_player = X
    depth = 9 
    while True:
        print_board(board)
        if current_player == X:
            move = get_player_move(board)
            make_move(board, current_player, move)
        else:
            move = get_best_move(board, depth)
            make_move(board, current_player, move)
        
        if is_winner(board, current_player):
            print_board(board)
            print(f"{current_player} wins!")
            break
        
        if is_board_full(board):
            print_board(board)
            print("It's a tie!")
            break
        
        current_player = O if current_player == X else X

if __name__ == "__main__":
    main()
